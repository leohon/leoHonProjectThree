import './App.css';
import app from './firebase'
import {useState, useEffect} from 'react';
import {getDatabase, ref, onValue, push, remove} from 'firebase/database';
import Header from './Header';
import Info from './FormInfo';
// import Form from './Form';
import Footer from './Footer';

function App() {
  // Stateful variables for contacts, name, company, email & phone
  const [contacts, setContacts] = useState([]);
  const [contactName, setcontactName] = useState('');  
  const [contactCompany, setcontactCompany] = useState('');  
  const [contactEmail, setcontactEmail] = useState('');  
  const [contactPhone, setcontactPhone] = useState('');

  // Collect data from database
  useEffect(function() {
    const database = getDatabase(app);
    const dbRef = ref(database);

    onValue(dbRef, function(res) {
      const data = res.val();
      const dataArray = [];

      // Push in key (for deletion part), name, company, email & phone
      for (let key in data) {
        dataArray.push({key: key, name: data[key].name, company: data[key].company, email: data[key].email, phone: data[key].phone});
      }

      setContacts(dataArray);
    })
  }, [])
  
  // Use a handler to store the data of each input into a unique variable. Users can add contacts themselves.
  // Note: individual handler for individual input
  const nameInput = function(e) {
    setcontactName(e.target.value);
  }
  const companyInput = function(e) {
    setcontactCompany(e.target.value);
  }
  const emailInput = function(e) {
    setcontactEmail(e.target.value);
  }
  const phoneInput = function(e) {
    setcontactPhone(e.target.value);
  }
  
  // Using the data, print it out on a note underneath.
  // Have another handler push input data into database
  const handleSubmit = function(e) {
    e.preventDefault();

    const database = getDatabase(app);
    const dbRef = ref(database);

    // Create object that stores the inputs
    const newUser = {
      name: contactName,
      company: contactCompany,
      email: contactEmail,
      phone: contactPhone
    }

    // Push object to database to then be printed out. A key will be automatically generated by Firebase.
    push(dbRef, newUser);

    // Reset input form for new entry
    setcontactName('');
    setcontactCompany('');
    setcontactEmail('');
    setcontactPhone('');
  }

  // Use a third handler to remove any unwanted/unneeded contacts
  // Uses key to remove from database
  const removeContact = function(contactKey) {
    const database = getDatabase(app);
    const dbRef = ref(database, `/${contactKey}`);

    remove(dbRef);
  }

  return (
    <div className="App">
      {/* Header */}
      <Header />
        
      {/* Form Section */}
      <Info />
      {/* <Form /> */}
      <form action="submit">
        <label htmlFor="newName">Name</label>
        <input type="text" id="newName" onChange={nameInput} value={contactName}/>
        
        <label htmlFor="newCo">Company</label>
        <input type="text" id="newCo" onChange={companyInput} value={contactCompany}/>
        
        <label htmlFor="newEmail">Email</label>
        <input type="email" id="newEmail" onChange={emailInput} value={contactEmail}/>

        <label htmlFor="newPhone">Phone Number</label>
        <input type="tel" id="newPhone" onChange={phoneInput} value={contactPhone}/>

        <button onClick={handleSubmit}>Add</button>
      </form>

      {/* Display the contacts in the book */}
      <h2>BOOK</h2>
      <ul>
        {
          // Map through the database and display the new contact in a UL sticky note
          // Key pushed above to be used here
          contacts.map(function(contact) {
            return (
              <div key={contact.key}>
                <p>{contact.name}</p>
                <p>{contact.company}</p>
                <p>{contact.email}</p>
                <p>{contact.phone}</p>
                <button onClick={function() {removeContact(contact.key)}}>X</button>
                <p>---</p>
              </div>
            )
          })
        }
      </ul>

      {/* Footer */}
      <Footer />
    </div>
  );
}

export default App;
